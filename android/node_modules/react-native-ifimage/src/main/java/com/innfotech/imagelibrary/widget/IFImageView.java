package com.innfotech.imagelibrary.widget;

import android.animation.ObjectAnimator;
import android.view.View;
import android.graphics.Color;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.drawee.drawable.ScalingUtils;
import com.facebook.drawee.generic.GenericDraweeHierarchy;
import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder;
import com.facebook.drawee.generic.RoundingParams;
import com.facebook.drawee.interfaces.DraweeController;
import com.facebook.drawee.view.SimpleDraweeView;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.events.RCTEventEmitter;

/**
 * Created by rou on 2017/10/10.
 */

public class IFImageView extends SimpleDraweeView {
    public float scale = 1.1f;
    private static final long DURATION_TIME = 200;
    private boolean canScale= true;//焦点变换是否触发动画
    ObjectAnimator objectAnimatorX;
    ObjectAnimator objectAnimatorY;

    public IFImageView(ThemedReactContext reactContext){
        super(reactContext);
        initView(reactContext);
    }
    private void initView(final ThemedReactContext reactContext){
        GenericDraweeHierarchy hierarchy = new GenericDraweeHierarchyBuilder(getResources()).build();
        this.setHierarchy(hierarchy);
        objectAnimatorX = ObjectAnimator.ofFloat(this, "scaleX", 1.0f, scale)
                .setDuration(DURATION_TIME);
        objectAnimatorY= ObjectAnimator.ofFloat(this, "scaleY", 1.0f, scale)
                .setDuration(DURATION_TIME);
        this.setFocusable(true);
        this.setOnFocusChangeListener(new OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                WritableMap nativeEvent= Arguments.createMap();
                nativeEvent.putBoolean("hasFocus", hasFocus);
                reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
                        v.getId(), "topChange",nativeEvent);
                if(canScale){
                    if(hasFocus){
                        objectAnimatorX.setFloatValues(1.0f, scale);
                        objectAnimatorY.setFloatValues(1.0f, scale);
                    }else{
                        objectAnimatorX.setFloatValues(scale, 1.0f);
                        objectAnimatorY.setFloatValues(scale, 1.0f);
                    }
                    objectAnimatorX.start();
                    objectAnimatorY.start();
                }
            }
        });
        this.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                WritableMap nativeEvent= Arguments.createMap();
                reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
                        v.getId(), "topChange", nativeEvent);
            }
        });

    }
    //初始化样式
    public void setInitValue(int cornersRadius, int borderWidth, String borderColor, boolean isCircle, String scaleType, String uri){
        GenericDraweeHierarchy hierarchy = new GenericDraweeHierarchyBuilder(getResources()).build();
        RoundingParams roundingParams = new RoundingParams();
        roundingParams.setCornersRadius((float) cornersRadius);
        if(borderWidth>0){
            roundingParams.setBorder(Color.parseColor(borderColor), (float) borderWidth);
        }
        roundingParams.setRoundAsCircle(isCircle);
        hierarchy.setRoundingParams(roundingParams);
        ScalingUtils.ScaleType scaleTypeU = ScalingUtils.ScaleType.FIT_CENTER;
        if(scaleType.equals("center_crop")) {
            scaleTypeU = ScalingUtils.ScaleType.CENTER_CROP;
        }else if(scaleType.equals("center")){
            scaleTypeU = ScalingUtils.ScaleType.CENTER;
        }else if(scaleType.equals("center_inside")){
            scaleTypeU = ScalingUtils.ScaleType.CENTER_INSIDE;
        }else if(scaleType.equals("fit_end")){
            scaleTypeU = ScalingUtils.ScaleType.FIT_END;
        }else if(scaleType.equals("fit_xy")){
            scaleTypeU = ScalingUtils.ScaleType.FIT_XY;
        }else if(scaleType.equals("fit_start")){
            scaleTypeU = ScalingUtils.ScaleType.FIT_START;
        }
        hierarchy.setActualImageScaleType(scaleTypeU);
        this.setHierarchy(hierarchy);
        this.setImageURI(uri);
    }
    //设置缩放倍数，需要大于1
    public void setScale(float scale){
        if(scale>0)
            this.scale = scale;
    }
    //GIF图设置自动播放
    public void setAutoPlay(boolean autoPlay){
        if(autoPlay) {
            DraweeController controller = Fresco.newDraweeControllerBuilder()
                    .setAutoPlayAnimations(true)
                    .build();
            this.setController(controller);
        }
    }
}

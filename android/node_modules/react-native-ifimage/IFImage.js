/**
 * Created by zhiyi014 on 2017/9/25.
 */
'use strict';
import PropTypes from 'prop-types';
import React, {Component} from 'react';
import {NativeModules, requireNativeComponent, View} from 'react-native';
import resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';

export default class IFImage extends Component {
    constructor(props) {
        super(props);
    }
    _onChangeDeal =(event)=>{
        if (event.nativeEvent.click) {
            if(this.props.onClick) {
                this.props.onClick(event);
            }
        } else if (typeof event.nativeEvent.hasFocus == 'boolean') {
            if(this.props.onFocus) {
                this.props.onFocus(event.nativeEvent.hasFocus)
            }
        }
    }
    render() {
        const source = resolveAssetSource(this.props.source) || {};
        let uri = source.uri || '';
        if (uri && uri.match(/^\//)) {
            uri = `file://${uri}`;
        }
        const isNetwork = !!(uri && uri.match(/^https?:/));
        const isAsset = !!(uri && uri.match(/^(assets-library|file|content|ms-appx|ms-appdata):/));
        const nativeProps = Object.assign({}, this.props);
        let cornersRadius = 0;
        if(this.props.cornersRadius){
            cornersRadius = this.props.cornersRadius;
        }
        let borderWidth = 0
        if(this.props.borderWidth) {
            borderWidth = this.props.borderWidth;
        }
        let borderColor = 'gray';
        if(this.props.borderColor) {
            borderColor = this.props.borderColor;
        }
        let isCircle = false;
        if(this.props.circle){
            isCircle = this.props.circle;
        }

        let scaleType ='fit_center';
        if(this.props.scaleType){
            scaleType = this.props.scaleType;
        }
        Object.assign(nativeProps, {
            src: {
                cornersRadius,
                borderWidth,
                borderColor,
                isCircle,
                scaleType,
                uri,
            },
            onChange : this._onChangeDeal,
            // autoPlay: this.props.autoPlay,
            // scale: this.props.scale,

        });
        return (<RCTIFImageView
            {...nativeProps}
        />)
    }
}
IFImage.propTypes = {
    src:PropTypes.object,
    cornersRadius: PropTypes.number,
    borderWidth: PropTypes.number,
    borderColor: PropTypes.string,
    scaleType: PropTypes.string,
    circle: PropTypes.bool,

    autoPlay: PropTypes.bool,
    scale: PropTypes.number,
    onClick: PropTypes.func,
    onFocus: PropTypes.func,
    /* Wrapper component */
    source: PropTypes.oneOfType([
        PropTypes.shape({
            uri: PropTypes.string
        }),
        // Opaque type returned by require('./video.mp4')
        PropTypes.number
    ]),
    ...View.propTypes, // 包含默认的View的属性

}
const RCTIFImageView = requireNativeComponent('RCTIFImageView', IFImage, {
    nativeOnly: {
        onChange: true}
});
